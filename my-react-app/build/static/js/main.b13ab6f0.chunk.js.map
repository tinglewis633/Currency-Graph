{"version":3,"sources":["logo.svg","LiveCurrency.js","BarChart.js","App.js","reportWebVitals.js","index.js"],"names":["LiveCurrency","props","symbol","useParams","toUpperCase","requestOptions","method","redirect","useState","ratio","setRatio","ratioClass","setRatioClass","useEffect","setInterval","fetch","then","response","text","result","data","JSON","parse","avg","a","b","toFixed","localStorage","setItem","className","slice","BarChart","loading","setLoading","chartData","setChartData","oneDayChartData","setOneDayChartData","oneWeekChartData","setOneWeekChartData","oneMonthChartData","setOneMonthChartData","sixMonthChartData","setSixMonthChartData","oneYearChartData","setOneYearChartData","allChartData","setAllChartData","resultInArr","oneDData","length","finalData","map","time","Date","push","unshift","console","log","catch","error","type","color","height","width","chartType","loader","options","series","0","legendTextStyle","chartArea","backgroundColor","areaOpacity","explorer","axis","keepInBounds","maxZoomIn","maxZoomOut","hAxis","title","textStyle","titleTextStyle","gridlines","vAxis","rootProps","onClick","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b13ab6f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Chart from \"react-google-charts\";\r\nimport \"./BarChart.css\";\r\nconst LiveCurrency = (props) => {\r\n  const params = useParams();\r\n  let symbol = params.symbol;\r\n  symbol = symbol.toUpperCase();\r\n  var requestOptions = {\r\n    method: \"GET\",\r\n    redirect: \"follow\",\r\n  };\r\n  const [loading, setLoading] = useState(true);\r\n  const [chartData, setChartData] = useState(null);\r\n  const [ratio, setRatio] = useState(1);\r\n  const [ratioClass, setRatioClass] = useState(\"defaultColor\");\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      fetch(\r\n        `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}`,\r\n        requestOptions\r\n      )\r\n        .then((response) => response.text())\r\n        .then((result) => {\r\n          const data = JSON.parse(result);\r\n          let avg = ((data.a + data.b) / 2).toFixed(7);\r\n\r\n          if (avg > localStorage.avg) {\r\n            setRatioClass(\"upColor\");\r\n          } else if (avg < localStorage.avg) {\r\n            setRatioClass(\"downColor\");\r\n          } else {\r\n            setRatioClass(\"defaultColor\");\r\n          }\r\n          localStorage.setItem(\"avg\", avg);\r\n\r\n          setRatio(avg);\r\n        });\r\n    }, 1000);\r\n  }, []);\r\n\r\n  return (\r\n    <div className='live-currency'>\r\n      <h2>\r\n        1{symbol.slice(0, 3)} = <span className={ratioClass}>{ratio}</span>\r\n        {symbol.slice(3, 6)}\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveCurrency;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Chart from \"react-google-charts\";\r\nimport \"./BarChart.css\";\r\nimport LiveCurrency from \"./LiveCurrency\";\r\nconst BarChart = () => {\r\n  var requestOptions = {\r\n    method: \"GET\",\r\n    redirect: \"follow\",\r\n  };\r\n  const params = useParams();\r\n  let symbol = params.symbol;\r\n  symbol = symbol.toUpperCase();\r\n  const [loading, setLoading] = useState(true);\r\n  const [chartData, setChartData] = useState(null);\r\n  const [oneDayChartData, setOneDayChartData] = useState(null);\r\n  const [oneWeekChartData, setOneWeekChartData] = useState(null);\r\n  const [oneMonthChartData, setOneMonthChartData] = useState(null);\r\n  const [sixMonthChartData, setSixMonthChartData] = useState(null);\r\n  const [oneYearChartData, setOneYearChartData] = useState(null);\r\n  const [allChartData, setAllChartData] = useState(null);\r\n  const [ratio, setRatio] = useState(0);\r\n  const [ratioClass, setRatioClass] = useState(\"defaultColor\");\r\n  useEffect(() => {\r\n    // fetch data for one day\r\n    //tokenvDb4I53QBWVWCwm5eQ0ZFCfDPoLVI7jH\r\n    fetch(\r\n      `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}&historical=true&scale=15`,\r\n      requestOptions\r\n    )\r\n      .then((response) => {\r\n        const result = response.text();\r\n        return result;\r\n      })\r\n      .then((result) => {\r\n        //change result from str to array of arrays\r\n        let resultInArr = JSON.parse(result);\r\n\r\n        //getting last 96 closest to current time data\r\n        let oneDData = resultInArr.slice(\r\n          resultInArr.length - 96,\r\n          resultInArr.length\r\n        );\r\n        let finalData = [];\r\n        oneDData.map((data) => {\r\n          //change Epoch time to date\r\n          let time = new Date(data[0] * 1000);\r\n\r\n          //Get average by divide (high + low) by 2\r\n          let avg = (data[2] + data[3]) / 2;\r\n          finalData.push([time, avg]);\r\n        });\r\n\r\n        // add correct data[0]\r\n        finalData.unshift([\"x\", `${symbol.slice(3, 6)}/${symbol.slice(0, 3)}`]);\r\n        setLoading(false);\r\n        setOneDayChartData(finalData);\r\n        console.log(\"finish fetching 1D data\");\r\n        setChartData(finalData);\r\n        return;\r\n      })\r\n      .then(() => {\r\n        // fetch data for all time\r\n        fetch(\r\n          `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}&historical=true&scale=1M`,\r\n          requestOptions\r\n        )\r\n          .then((response) => response.text())\r\n          .then((result) => {\r\n            //change result from str to array of arrays\r\n            let resultInArr = JSON.parse(result);\r\n            //getting last 96 closest to current time data\r\n            let oneDData = resultInArr.slice(\r\n              resultInArr.length - 200,\r\n              resultInArr.length\r\n            );\r\n            let finalData = [];\r\n            oneDData.map((data) => {\r\n              //change Epoch time to date\r\n              let time = new Date(data[0] * 1000);\r\n              //Get average by divide (high + low) by 2\r\n              let avg = (data[2] + data[3]) / 2;\r\n              finalData.push([time, avg]);\r\n            });\r\n            // add correct data[0]\r\n            finalData.unshift([\r\n              \"x\",\r\n              `${symbol.slice(3, 6)}/${symbol.slice(0, 3)}`,\r\n            ]);\r\n            setAllChartData(finalData);\r\n            console.log(\"finish fetching all data\");\r\n            return;\r\n          })\r\n          .catch((error) => console.log(\"error\", error));\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    // fetch data for seven day\r\n    fetch(\r\n      `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}&historical=true&scale=60`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.text())\r\n      .then((result) => {\r\n        //change result from str to array of arrays\r\n        let resultInArr = JSON.parse(result);\r\n\r\n        //getting last 96 closest to current time data\r\n        let oneDData = resultInArr.slice(\r\n          resultInArr.length - 120,\r\n          resultInArr.length\r\n        );\r\n        let finalData = [];\r\n        oneDData.map((data) => {\r\n          //change Epoch time to date\r\n          let time = new Date(data[0] * 1000);\r\n\r\n          //Get average by divide (high + low) by 2\r\n          let avg = (data[2] + data[3]) / 2;\r\n          finalData.push([time, avg]);\r\n        });\r\n\r\n        // add correct data[0]\r\n        finalData.unshift([\"x\", `${symbol.slice(3, 6)}/${symbol.slice(0, 3)}`]);\r\n        setOneWeekChartData(finalData);\r\n        console.log(\"finish fetching 1W data\");\r\n        return;\r\n      })\r\n      .then(() => {\r\n        // fetch data for one year\r\n        fetch(\r\n          `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}&historical=true&scale=1W`,\r\n          requestOptions\r\n        )\r\n          .then((response) => response.text())\r\n          .then((result) => {\r\n            //change result from str to array of arrays\r\n            let resultInArr = JSON.parse(result);\r\n\r\n            //getting last 96 closest to current time data\r\n            let oneDData = resultInArr.slice(\r\n              resultInArr.length - 55,\r\n              resultInArr.length\r\n            );\r\n            let finalData = [];\r\n            oneDData.map((data) => {\r\n              //change Epoch time to date\r\n              let time = new Date(data[0] * 1000);\r\n\r\n              //Get average by divide (high + low) by 2\r\n              let avg = (data[2] + data[3]) / 2;\r\n              finalData.push([time, avg]);\r\n            });\r\n\r\n            // add correct data[0]\r\n            finalData.unshift([\r\n              \"x\",\r\n              `${symbol.slice(3, 6)}/${symbol.slice(0, 3)}`,\r\n            ]);\r\n\r\n            setOneYearChartData(finalData);\r\n            console.log(\"finish fetching 1Y data\");\r\n            return;\r\n          })\r\n          .catch((error) => console.log(\"error\", error));\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n\r\n    // fetch data for one month\r\n    fetch(\r\n      `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}&historical=true&scale=1D`,\r\n      requestOptions\r\n    )\r\n      .then((response) => response.text())\r\n      .then((result) => {\r\n        //change result from str to array of arrays\r\n        let resultInArr = JSON.parse(result);\r\n\r\n        //getting last 96 closest to current time data\r\n\r\n        let oneDData = resultInArr.slice(\r\n          resultInArr.length - 22,\r\n          resultInArr.length\r\n        );\r\n        let finalData = [];\r\n        oneDData.map((data) => {\r\n          //change Epoch time to date\r\n          let time = new Date(data[0] * 1000);\r\n\r\n          //Get average by divide (high + low) by 2\r\n          let avg = (data[2] + data[3]) / 2;\r\n          finalData.push([time, avg]);\r\n        });\r\n\r\n        // add correct data[0]\r\n        finalData.unshift([\"x\", `${symbol.slice(3, 6)}/${symbol.slice(0, 3)}`]);\r\n\r\n        setOneMonthChartData(finalData);\r\n        console.log(\"finish fetching 1M data\");\r\n        return;\r\n      })\r\n      .then(() => {\r\n        // fetch data for six month\r\n        fetch(\r\n          `https://api.currencyapi.io/markets?token=9PjFme7prphhhZ22SfuZ3MKLfT1hSg1i&symbol=${symbol}&historical=true&scale=1W`,\r\n          requestOptions\r\n        )\r\n          .then((response) => {\r\n            const result = response.text();\r\n\r\n            return result;\r\n          })\r\n          .then((result) => {\r\n            //change result from str to array of arrays\r\n            let resultInArr = JSON.parse(result);\r\n\r\n            //getting last 96 closest to current time data\r\n            let oneDData = resultInArr.slice(\r\n              resultInArr.length - 27,\r\n              resultInArr.length\r\n            );\r\n            let finalData = [];\r\n            oneDData.map((data) => {\r\n              //change Epoch time to date\r\n              let time = new Date(data[0] * 1000);\r\n\r\n              //Get average by divide (high + low) by 2\r\n              let avg = (data[2] + data[3]) / 2;\r\n              finalData.push([time, avg]);\r\n            });\r\n\r\n            // add correct data[0]\r\n            finalData.unshift([\r\n              \"x\",\r\n              `${symbol.slice(3, 6)}/${symbol.slice(0, 3)}`,\r\n            ]);\r\n\r\n            setSixMonthChartData(finalData);\r\n            console.log(\"finish fetching 6M data\");\r\n            return;\r\n          })\r\n          .catch((error) => console.log(\"error\", error));\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  }, []);\r\n\r\n  const oneDayBtn = () => {\r\n    setChartData(oneDayChartData);\r\n  };\r\n  const oneWeekBtn = () => {\r\n    setChartData(oneWeekChartData);\r\n  };\r\n  const oneMonthBtn = () => {\r\n    setChartData(oneMonthChartData);\r\n  };\r\n  const sixMonthBtn = () => {\r\n    setChartData(sixMonthChartData);\r\n  };\r\n  const oneYearBtn = () => {\r\n    setChartData(oneYearChartData);\r\n  };\r\n  const allTimeBtn = () => {\r\n    setChartData(allChartData);\r\n  };\r\n  if (\r\n    loading\r\n    // ||\r\n    // !chartData ||\r\n    // !oneDayChartData ||\r\n    // !oneWeekChartData ||\r\n    // !oneMonthChartData ||\r\n    // !sixMonthChartData ||\r\n    // !oneYearChartData ||\r\n    // !allChartData\r\n  ) {\r\n    return (\r\n      <div className='spinner'>\r\n        {\" \"}\r\n        <Loader type='TailSpin' color='#00BFFF' height={80} width={80} />\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <>\r\n        <LiveCurrency />\r\n\r\n        <Chart\r\n          width={\"100vw\"}\r\n          height={\"85vh\"}\r\n          chartType='AreaChart'\r\n          loader={<div>Loading Chart</div>}\r\n          data={chartData}\r\n          options={{\r\n            series: {\r\n              0: { color: \"#3452f8\" },\r\n            },\r\n            legendTextStyle: { color: \"#FFF\" },\r\n            chartArea: { width: \"80%\", height: \"70%\" },\r\n            backgroundColor: \"#000437\",\r\n            areaOpacity: 0.2,\r\n            explorer: {\r\n              axis: \"horizontal\",\r\n              keepInBounds: true,\r\n              maxZoomIn: 1.0,\r\n              maxZoomOut: 1.0,\r\n            },\r\n            hAxis: {\r\n              title: \"Time\",\r\n              textStyle: { color: \"#FFF\" },\r\n              titleTextStyle: {\r\n                color: \"#FFF\",\r\n              },\r\n              gridlines: {\r\n                color: \"transparent\",\r\n              },\r\n            },\r\n            vAxis: {\r\n              title: \"Currency Ratio\",\r\n              titleTextStyle: {\r\n                color: \"#FFF\",\r\n              },\r\n              textStyle: { color: \"#FFF\" },\r\n              gridlines: {\r\n                color: \"transparent\",\r\n              },\r\n            },\r\n          }}\r\n          rootProps={{ \"data-testid\": \"1\" }}\r\n        />\r\n        <div className='btns'>\r\n          <button onClick={oneDayBtn} className='time-btn'>\r\n            1D\r\n          </button>\r\n\r\n          <button onClick={oneWeekBtn} className='time-btn'>\r\n            7D\r\n          </button>\r\n\r\n          <button onClick={oneMonthBtn} className='time-btn'>\r\n            1M\r\n          </button>\r\n\r\n          <button onClick={sixMonthBtn} className='time-btn'>\r\n            6M\r\n          </button>\r\n\r\n          <button onClick={oneYearBtn} className='time-btn'>\r\n            1Y\r\n          </button>\r\n\r\n          <button onClick={allTimeBtn} className='time-btn'>\r\n            ALL\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default BarChart;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport BarChart from \"./BarChart\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/:symbol'>\n          <BarChart />\n        </Route>\n        <Route exact path='/'>\n          <h1>Welcome to Home Page</h1>\n        </Route>\n\n        {/* <Route render={() => <Redirect to='/' />} /> */}\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}